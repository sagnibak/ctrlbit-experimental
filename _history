{"entries":[{"timestamp":1753139352219,"editorVersion":"7.0.49","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":231,"start2":231,"length1":64,"length2":44}]},{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"/** \n## Control Interface\n\n### Steering\n\nThe radio sends a key-value pair with key `\"steer\"` and a value between 0 and\n180, with 90 meaning straight ahead.\n\n### Speed\n\nThe radio sends a key-value pair with key `\"speed\"` and a value between 0 and\n180, with 90 meaning no speed, higher values meaning forward speed, and lower\nvalues meaning going backwards.\n\n */\nlet STEERING_KEY = \"steer\"\nlet SPEED_KEY = \"speed\"\nlet MAX_SPEED = 120\nclass Utils {\n    public drawSteeringArrow(aDirection: number) {\n        let myX: number;\n        /** \n        ArrowNames.EAST:\n        o o o o o\n        o o o o o\n        o o o # .\n        o o o # #\n        o o o # .\n\n        ArrowNames.WEST:\n        o o o o o\n        o o o o o\n        o o o . #\n        o o o # #\n        o o o . #\n\n        ArrowNames.NORTH:\n        o o o o o\n        o o o o o\n        o o o # #\n        o o o # #\n        o o o # #\n        \n */\n        for (myX = 3; myX < 5; myX++) {\n            led.unplot(myX, 2)\n            led.unplot(myX, 4)\n        }\n        for (myX = 3; myX < 5; myX++) {\n            led.plot(myX, 3)\n        }\n        if (aDirection == ArrowNames.East) {\n            led.plot(3, 2)\n            led.plot(3, 4)\n        } else if (aDirection == ArrowNames.West) {\n            led.plot(4, 2)\n            led.plot(4, 4)\n        } else if (aDirection == ArrowNames.North) {\n            for (myX = 3; myX < 5; myX++) {\n                led.plot(myX, 2)\n                led.plot(myX, 4)\n            }\n        } else {\n            for (myX = 3; myX < 5; myX++) {\n                led.plot(myX, 3)\n            }\n        }\n        \n    }\n    \n    public drawSpeedBar(aBarHeight: number) {\n        let myY: number;\n        /** \n        aBarHeight: int\n            must be in range [-4, 4]\n    \n        Positive heights plotted from the bottom up, e.g., +3:\n        . . o o o\n        . . o o o\n        # # o o o\n        # # o o o\n        # # o o o\n\n        Negative heights plotted from the bottom up, e.g., -4:\n        # # o o o\n        # # o o o\n        # # o o o\n        # # o o o\n        . . o o o\n        \n */\n        for (myY = 0; myY < 5; myY++) {\n            led.unplot(0, myY)\n            led.unplot(1, myY)\n        }\n        if (aBarHeight > 0) {\n            for (myY = 4; myY > 4 - aBarHeight; myY += -1) {\n                led.plot(0, myY)\n                led.plot(1, myY)\n            }\n        } else if (aBarHeight < 0) {\n            for (myY = 0; myY < Math.abs(aBarHeight); myY++) {\n                led.plot(0, myY)\n                led.plot(1, myY)\n            }\n        }\n        \n    }\n    \n}\n\nbasic.forever(function on_forever() {\n    let speed_val = 90\n    //  steering control\n    if (input.buttonIsPressed(Button.A)) {\n        //  steer left\n        new Utils().drawSteeringArrow(ArrowNames.West)\n        radio.sendValue(STEERING_KEY, 45)\n    } else if (input.buttonIsPressed(Button.B)) {\n        //  steer right\n        new Utils().drawSteeringArrow(ArrowNames.East)\n        radio.sendValue(STEERING_KEY, 135)\n    } else {\n        //  go straight\n        new Utils().drawSteeringArrow(ArrowNames.North)\n        radio.sendValue(STEERING_KEY, 90)\n    }\n    \n    //  speed control\n    let myAngle = input.rotation(Rotation.Pitch)\n    if (myAngle < -30) {\n        speed_val += 10\n        new Utils().drawSpeedBar(Math.idiv(speed_val - 90, 22))\n        radio.sendValue(SPEED_KEY, speed_val)\n    } else if (myAngle > 30) {\n        speed_val -= 10\n        new Utils().drawSpeedBar(Math.idiv(speed_val - 90, 22))\n        radio.sendValue(SPEED_KEY, speed_val)\n    } else {\n        new Utils().drawSpeedBar(0)\n        radio.sendValue(SPEED_KEY, 90)\n    }\n    \n})"],[0,"\n"]],"start1":0,"start2":0,"length1":3637,"length2":1}]},{"type":"added","filename":"main.py","value":"\"\"\"\n## Control Interface\n\n### Steering\n\nThe radio sends a key-value pair with key `\"steer\"` and a value between 0 and\n180, with 90 meaning straight ahead.\n\n### Speed\n\nThe radio sends a key-value pair with key `\"speed\"` and a value between 0 and\n180, with 90 meaning no speed, higher values meaning forward speed, and lower\nvalues meaning going backwards.\n\"\"\"\n\n\nSTEERING_KEY = \"steer\"\nSPEED_KEY = \"speed\"\nMAX_SPEED = 120\n\nclass Utils:\n    def drawSteeringArrow(self, aDirection: ArrowNames):\n        \"\"\"\n        ArrowNames.EAST:\n        o o o o o\n        o o o o o\n        o o o # .\n        o o o # #\n        o o o # .\n\n        ArrowNames.WEST:\n        o o o o o\n        o o o o o\n        o o o . #\n        o o o # #\n        o o o . #\n\n        ArrowNames.NORTH:\n        o o o o o\n        o o o o o\n        o o o # #\n        o o o # #\n        o o o # #\n        \"\"\"\n        for myX in range(3, 5):\n            led.unplot(myX, 2)\n            led.unplot(myX, 4)\n        for myX in range(3, 5):\n            led.plot(myX, 3)\n\n        if aDirection == ArrowNames.EAST:\n            led.plot(3, 2)\n            led.plot(3, 4)\n        elif aDirection == ArrowNames.WEST:\n            led.plot(4, 2)\n            led.plot(4, 4)\n        elif aDirection == ArrowNames.NORTH:\n            for myX in range(3, 5):\n                led.plot(myX, 2)\n                led.plot(myX, 4)\n        else:\n            for myX in range(3, 5):\n                led.plot(myX, 3)\n    \n    \n    def drawSpeedBar(self, aBarHeight):\n        \"\"\"\n        aBarHeight: int\n            must be in range [-4, 4]\n    \n        Positive heights plotted from the bottom up, e.g., +3:\n        . . o o o\n        . . o o o\n        # # o o o\n        # # o o o\n        # # o o o\n\n        Negative heights plotted from the bottom up, e.g., -4:\n        # # o o o\n        # # o o o\n        # # o o o\n        # # o o o\n        . . o o o\n        \"\"\"\n        for myY in range(0, 5):\n            led.unplot(0, myY)\n            led.unplot(1, myY)\n\n        if aBarHeight > 0:\n            for myY in range(4, 4 - aBarHeight, -1):\n                led.plot(0, myY)\n                led.plot(1, myY)\n        elif aBarHeight < 0:\n            for myY in range(0, abs(aBarHeight)):\n                led.plot(0, myY)\n                led.plot(1, myY)\n\n\ndef on_forever():\n    speed_val = 90\n    # steering control\n    if input.button_is_pressed(Button.A):\n        # steer left\n        Utils().drawSteeringArrow(ArrowNames.WEST)\n        radio.send_value(STEERING_KEY, 45)\n    elif input.button_is_pressed(Button.B):\n        # steer right\n        Utils().drawSteeringArrow(ArrowNames.EAST)\n        radio.send_value(STEERING_KEY, 135)\n    else:\n        # go straight\n        Utils().drawSteeringArrow(ArrowNames.NORTH)\n        radio.send_value(STEERING_KEY, 90)\n\n    # speed control\n    myAngle = input.rotation(Rotation.PITCH)\n    if myAngle < -30:\n        speed_val += 10\n        Utils().drawSpeedBar((speed_val - 90) // 22)\n        radio.send_value(SPEED_KEY, speed_val)\n    elif myAngle > 30:\n        speed_val -= 10\n        Utils().drawSpeedBar((speed_val - 90) // 22)\n        radio.send_value(SPEED_KEY, speed_val)\n    else:\n        Utils().drawSpeedBar(0)\n        radio.send_value(SPEED_KEY, 90)\n\nbasic.forever(on_forever)\n"}]},{"timestamp":1753139450616,"editorVersion":"7.0.49","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"ever():\n"],[1,"    speed_val = 90\n"],[0,"    # st"]],"start1":2288,"start2":2288,"length1":16,"length2":35},{"diffs":[[0,"TCH)"],[-1," # in ra"],[1,"\n    if myA"],[0,"ng"],[1,"l"],[0,"e "],[-1,"[-90, 90]\n    mySpeed = -1 * myAngle + 9"],[1,"< -30:\n        speed_val += 10\n        Utils().drawSpeedBar((speed_val - 90) // 22)\n        radio.send_value(SPEED_KEY, speed_val)\n    elif myAngle > 30:\n        speed_val -= 1"],[0,"0\n    "],[1," "],[1,"   "],[0,"Util"]],"start1":2844,"start2":2844,"length1":66,"length2":210},{"diffs":[[0,"eedBar(("],[-1,"myS"],[1,"s"],[0,"peed"],[1,"_val"],[0," - 90) /"]],"start1":3064,"start2":3064,"length1":23,"length2":25},{"diffs":[[0," 90) // 22)\n"],[1,"    "],[0,"    radio.se"]],"start1":3083,"start2":3083,"length1":24,"length2":28},{"diffs":[[0,"EY, "],[-1,"mySpeed"],[1,"speed_val)\n    else:\n        Utils().drawSpeedBar(0)\n        radio.send_value(SPEED_KEY, 90"],[0,")\n\nb"]],"start1":3127,"start2":3127,"length1":15,"length2":99}]}]},{"timestamp":1753141214953,"editorVersion":"7.0.49","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"forever() {\n"],[1,"    let speed_val = 90\n"],[0,"    //  stee"]],"start1":2599,"start2":2599,"length1":24,"length2":47},{"diffs":[[0,"    "],[-1,"//  in range [-90, 90]\n    let mySpeed = -1 * myAngle + 90\n"],[1,"if (myAngle < -30) {\n        speed_val += 10\n        new Utils().drawSpeedBar(Math.idiv(speed_val - 90, 22))\n        radio.sendValue(SPEED_KEY, speed_val)\n    } else if (myAngle > 30) {\n        speed_val -= 10\n    "],[0,"    "]],"start1":3211,"start2":3211,"length1":67,"length2":222},{"diffs":[[0,"th.idiv("],[-1,"myS"],[1,"s"],[0,"peed"],[1,"_val"],[0," - 90, 2"]],"start1":3460,"start2":3460,"length1":23,"length2":25},{"diffs":[[0,"0, 22))\n    "],[1,"   "],[1," "],[0,"radio.sendVa"]],"start1":3481,"start2":3481,"length1":24,"length2":28},{"diffs":[[0,"EY, "],[-1,"mySpeed)"],[1,"speed_val)\n    } else {\n        new Utils().drawSpeedBar(0)\n        radio.sendValue(SPEED_KEY, 90)\n    }\n    "],[0,"\n})\n"]],"start1":3520,"start2":3520,"length1":16,"length2":117}]}]}],"snapshots":[{"timestamp":1753139352218,"editorVersion":"7.0.49","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"ctrlbit-experimental\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1753141214953,"editorVersion":"7.0.49","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"","README.md":"","main.py":"\"\"\"\n## Control Interface\n\n### Steering\n\nThe radio sends a key-value pair with key `\"steer\"` and a value between 0 and\n180, with 90 meaning straight ahead.\n\n### Speed\n\nThe radio sends a key-value pair with key `\"speed\"` and a value between 0 and\n180, with 90 meaning no speed, higher values meaning forward speed, and lower\nvalues meaning going backwards.\n\"\"\"\n\n\nSTEERING_KEY = \"steer\"\nSPEED_KEY = \"speed\"\nMAX_SPEED = 120\n\nclass Utils:\n    def drawSteeringArrow(self, aDirection: ArrowNames):\n        \"\"\"\n        ArrowNames.EAST:\n        o o o o o\n        o o o o o\n        o o o # .\n        o o o # #\n        o o o # .\n\n        ArrowNames.WEST:\n        o o o o o\n        o o o o o\n        o o o . #\n        o o o # #\n        o o o . #\n\n        ArrowNames.NORTH:\n        o o o o o\n        o o o o o\n        o o o # #\n        o o o # #\n        o o o # #\n        \"\"\"\n        for myX in range(3, 5):\n            led.unplot(myX, 2)\n            led.unplot(myX, 4)\n        for myX in range(3, 5):\n            led.plot(myX, 3)\n\n        if aDirection == ArrowNames.EAST:\n            led.plot(3, 2)\n            led.plot(3, 4)\n        elif aDirection == ArrowNames.WEST:\n            led.plot(4, 2)\n            led.plot(4, 4)\n        elif aDirection == ArrowNames.NORTH:\n            for myX in range(3, 5):\n                led.plot(myX, 2)\n                led.plot(myX, 4)\n        else:\n            for myX in range(3, 5):\n                led.plot(myX, 3)\n    \n    \n    def drawSpeedBar(self, aBarHeight):\n        \"\"\"\n        aBarHeight: int\n            must be in range [-4, 4]\n    \n        Positive heights plotted from the bottom up, e.g., +3:\n        . . o o o\n        . . o o o\n        # # o o o\n        # # o o o\n        # # o o o\n\n        Negative heights plotted from the bottom up, e.g., -4:\n        # # o o o\n        # # o o o\n        # # o o o\n        # # o o o\n        . . o o o\n        \"\"\"\n        for myY in range(0, 5):\n            led.unplot(0, myY)\n            led.unplot(1, myY)\n\n        if aBarHeight > 0:\n            for myY in range(4, 4 - aBarHeight, -1):\n                led.plot(0, myY)\n                led.plot(1, myY)\n        elif aBarHeight < 0:\n            for myY in range(0, abs(aBarHeight)):\n                led.plot(0, myY)\n                led.plot(1, myY)\n\n\ndef on_forever():\n    speed_val = 90\n    # steering control\n    if input.button_is_pressed(Button.A):\n        # steer left\n        Utils().drawSteeringArrow(ArrowNames.WEST)\n        radio.send_value(STEERING_KEY, 45)\n    elif input.button_is_pressed(Button.B):\n        # steer right\n        Utils().drawSteeringArrow(ArrowNames.EAST)\n        radio.send_value(STEERING_KEY, 135)\n    else:\n        # go straight\n        Utils().drawSteeringArrow(ArrowNames.NORTH)\n        radio.send_value(STEERING_KEY, 90)\n\n    # speed control\n    myAngle = input.rotation(Rotation.PITCH)\n    if myAngle < -30:\n        speed_val += 10\n        Utils().drawSpeedBar((speed_val - 90) // 22)\n        radio.send_value(SPEED_KEY, speed_val)\n    elif myAngle > 30:\n        speed_val -= 10\n        Utils().drawSpeedBar((speed_val - 90) // 22)\n        radio.send_value(SPEED_KEY, speed_val)\n    else:\n        Utils().drawSpeedBar(0)\n        radio.send_value(SPEED_KEY, 90)\n\nbasic.forever(on_forever)\n","pxt.json":"{\n    \"name\": \"ctrlbit-experimental\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}}],"shares":[],"lastSaveTime":1753141215147}